dubbo
database
#3.2.1以上使用
modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory
realdriver=com.mysql.cj.jdbc.Driver
#3.2.1以下使用或者不配置
#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory
# 自定义日志打印
logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger
#日志输出到控制台
appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger
# 使用日志系统记录 sql
#appender=com.p6spy.engine.spy.appender.Slf4JLogger
# 设置 p6spy driver 代理
deregisterdrivers=true
# 取消JDBC URL前缀
useprefix=true
# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.
excludecategories=info,debug,result,commit,resultset
# 日期格式
dateformat=yyyy-MM-dd HH:mm:ss
# 实际驱动可多个
#driverlist=org.h2.Driver
# 是否开启慢SQL记录
outagedetection=true
# 慢SQL记录标准 2 秒
outagedetectioninterval=2
redis
数据库分库分表策略
租户分库。时间分表。ID全局统一
sharding
# 数据库名称（因为只分表不分库，所以数据源只有一个）
sharding.jdbc.datasource.names=pay_aliyun,pay_tmall,pay_taobao
sharding.jdbc.datasource.pay_aliyun.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.pay_aliyun.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.pay_aliyun.url=jdbc:mysql://127.0.0.1:3306/pay_aliyun?useUnicode=true&characterEncoding=utf8
sharding.jdbc.datasource.pay_aliyun.username=root
sharding.jdbc.datasource.pay_aliyun.password=root
sharding.jdbc.datasource.pay_taobao.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.pay_taobao.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.pay_taobao.url=jdbc:mysql://127.0.0.1:3306/pay_taobao?useUnicode=true&characterEncoding=utf8
sharding.jdbc.datasource.pay_taobao.username=root
sharding.jdbc.datasource.pay_taobao.password=root
sharding.jdbc.datasource.pay_tmall.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.pay_tmall.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.pay_tmall.url=jdbc:mysql://127.0.0.1:3306/pay_tmall?useUnicode=true&characterEncoding=utf8
sharding.jdbc.datasource.pay_tmall.username=root
sharding.jdbc.datasource.pay_tmall.password=root
sharding.jdbc.config.sharding.default-data-source-name=afei
# 默认数据源不用分库分表，所以不需要配置sharding.jdbc.config.sharding.default-database-strategy...
sharding.jdbc.config.sharding.tables.tb_order.actual-data-nodes=pay_tmall.tb_order,pay_taobao.tb_order,pay_aliyun.tb_order
sharding.jdbc.config.sharding.tables.tb_order.actual-data-nodes=afei.tb_order_tmall,afei.tb_order_taobao,afei.tb_order_aliyun
# 根据merchant列进行分库
sharding.jdbc.config.sharding.default-database-strategy.standard.sharding-column=merchant
# 自定义分库算法
sharding.jdbc.config.sharding.default-database-strategy.standard.precise-algorithm-class-name=com.afei.boot.util.DbShardingAlgorithm
# 分片键（重要）
sharding.jdbc.config.sharding.tables.tb_order.table-strategy.standard.sharding-column=merchant
# 自定义分表算法（重要）
sharding.jdbc.config.sharding.tables.tb_order.table-strategy.standard.precise-algorithm-class-name=com.afei.boot.util.OrderShardingAlgorithm
sharding.jdbc.config.props.sql.show=true
public class OrderShardingAlgorithm implements PreciseShardingAlgorithm<String> {
@Override
public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<String> shardingValue) {
String targetTable = "tb_order_" + shardingValue.getValue();
if (availableTargetNames.contains(targetTable)){
return targetTable;
}
throw new UnsupportedOperationException("无法判定的值: " + shardingValue.getValue());
}
}
public class DbShardingAlgorithm implements PreciseShardingAlgorithm<String> {
private static final String DB_NAME_PREFIX = "pay_";
@Override
public String doSharding(final Collection<String> availableTargetNames, final PreciseShardingValue<String> shardingValue) {
String targetTable = DB_NAME_PREFIX + shardingValue.getValue();
if (availableTargetNames.contains(targetTable)){
return targetTable;
}
throw new UnsupportedOperationException("无法判定的值: " + shardingValue.getValue());
}
}